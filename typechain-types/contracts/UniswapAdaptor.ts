/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface UniswapAdaptorInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "factory()": FunctionFragment;
    "getPriceFor(uint256,address[])": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "router()": FunctionFragment;
    "swap(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "createPair"
      | "factory"
      | "getPriceFor"
      | "removeLiquidity"
      | "router"
      | "swap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriceFor",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [BigNumberish, BigNumberish, string[], string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface UniswapAdaptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapAdaptorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createPair(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getPriceFor(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    _tokenA: string,
    _tokenB: string,
    _amountADesired: BigNumberish,
    _amountBDesired: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createPair(
    _token0: string,
    _token1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getPriceFor(
    _amountOut: BigNumberish,
    _path: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _tokenA: string,
    _tokenB: string,
    _liquidity: BigNumberish,
    _amountAMin: BigNumberish,
    _amountBMin: BigNumberish,
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  swap(
    _amountIn: BigNumberish,
    _amountOutMin: BigNumberish,
    _path: string[],
    _to: string,
    _deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPair(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getPriceFor(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createPair(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceFor(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      _tokenA: string,
      _tokenB: string,
      _amountADesired: BigNumberish,
      _amountBDesired: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createPair(
      _token0: string,
      _token1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceFor(
      _amountOut: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: string,
      _tokenB: string,
      _liquidity: BigNumberish,
      _amountAMin: BigNumberish,
      _amountBMin: BigNumberish,
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swap(
      _amountIn: BigNumberish,
      _amountOutMin: BigNumberish,
      _path: string[],
      _to: string,
      _deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
